dd关键词:
broker
topic 
partition
offset
producer
consumer group
consumer
消息有序性


-----------------

生产者： 消息键、分区器
消费者:偏移量、消费者群组、消费者与分区间的映射。
broker与集群：集群控制器、选主、保留消息、多集群(暂不需要了解)

bootstrap.servers、  序列器/反序列器

cha 3向kafka写入数据

1. 场景需求：是否每条消息都很重要？是否允许小部分消息丢失？偶尔出现重复消息是否可以接受？是否有严格的延迟和吞吐性要求？

kafka生产者组件图
2. producerRecord对象中既没有指定分区， 也没有指定key时，分区器如何选择分区？  | 随机(round robin)发送到主题内各个可用的分区上

3. 发送消息主要有三种方式
 a. fire and forget b. 同步发送 c.异步发送(platform项目中的方式)

生产者的配置
1.acks


cha4 从kafka读取消息
消费者与消费者群组:
  消费者群组内增加消费者是横向扩展消费能力的主要方式， 但当消费者数量超过分区数量时，多余的消费者只会被闲置。
  消费者群组间互不影响。 所以可以有多个应用来订阅同一个主题， 每一个应用有自己的消费者群组即可。

再均衡：
  群组协调器:心跳

4.2创建消费者
4.3订阅主题
  subscribe可以传入一个正则表达式。正则表达式可以匹配多个主题，如果有人创建了新的主题，并且主题的名字与正则表达式匹配，那么会立即触发一次再均衡，消费者就可以读取新添加的主题。


消费者的配置
1. fetch.min.bytes
2. fetch.max.wait.ms
3. max.partition.fetch.bytes
4.


4.6 提交与偏移量 ：特殊主题:_consumer_offset
  自动提交
  提交当前偏移量

4.8 从特定偏移量处开始处理记录（exactly-once）
  保存记录和偏移量放在一个原子操作里完成，就可以避免出现上述情况


6.5.1 消费者的可靠性配置




-------
kafka stream



